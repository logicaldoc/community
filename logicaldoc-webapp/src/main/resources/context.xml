<?xml version="1.0" encoding="UTF-8"?>
<beans default-autowire="no" default-lazy-init="false"
	xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:util="http://www.springframework.org/schema/util"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:security="http://www.springframework.org/schema/security"
	xmlns:jms="http://www.springframework.org/schema/jms"
	xsi:schemaLocation="
            http://www.springframework.org/schema/beans 
            http://www.springframework.org/schema/beans/spring-beans.xsd
            http://www.springframework.org/schema/util 
            http://www.springframework.org/schema/util/spring-util.xsd
            http://www.springframework.org/schema/context
            http://www.springframework.org/schema/context/spring-context.xsd
            http://www.springframework.org/schema/tx
            http://www.springframework.org/schema/tx/spring-tx.xsd
            http://www.springframework.org/schema/aop
            http://www.springframework.org/schema/aop/spring-aop.xsd
            http://www.springframework.org/schema/security
            http://www.springframework.org/schema/security/spring-security.xsd">

    <context:annotation-config />

	<import resource="classpath*:context-security.xml" />
	<import resource="classpath*:context/context-*.xml" />

	<!-- This post processor ensures placeholders substitutions -->
	<bean id="PropertyPlaceholderConfigurer" class="com.logicaldoc.util.spring.PropertiesPlaceHolder">
		<property name="locations">
			<list>
				<value>classpath*:context.properties</value>
			</list>
		</property>
	</bean>
	<bean id="ContextProperties" class="${registry}">
		<property name="maxBackups" value="10" />
	</bean>
	
	<bean id="Context" class="com.logicaldoc.util.Context" factory-method="get" lazy-init="false" />

	<!-- Connection Pool implementations -->
	<bean id="DbcpConfig" class="com.logicaldoc.core.util.DbcpConfig">
		<property name="driverClassName" value="${jdbc.driver}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		<property name="validationQuery" value="${jdbc.validationQuery}" />
		<property name="initialSize" value="${jdbc.dbcp.initialSize}" />
		<property name="maxTotal" value="${jdbc.dbcp.maxTotal}" />
		<property name="maxIdle" value="${jdbc.dbcp.maxIdle}" />
		<property name="testOnBorrow" value="${jdbc.dbcp.testOnBorrow}" />
		<property name="testWhileIdle" value="${jdbc.dbcp.testWhileIdle}" />
		<property name="connectionInitSqls" value="${jdbc.dbcp.connectionInitSqls}" />
		<property name="timeBetweenEvictionRunsMillis"
			value="${jdbc.dbcp.timeBetweenEvictionRuns}" />
		<property name="numTestsPerEvictionRun" value="${jdbc.dbcp.testsPerEvictionRun}" />
	</bean>
	<bean id="HikariConfig" class="com.zaxxer.hikari.HikariConfig">
		<property name="poolName" value="Connection Pool" />
		<property name="connectionTestQuery" value="${jdbc.validationQuery}" />
		<property name="driverClassName" value="${jdbc.driver}" />
		<property name="jdbcUrl" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		<property name="connectionTimeout" value="${jdbc.hikari.connectionTimeout}" />
		<property name="idleTimeout" value="${jdbc.hikari.idleTimeout}" />
		<property name="maxLifetime" value="${jdbc.hikari.maxLifetime}" />
		<property name="minimumIdle" value="${jdbc.hikari.minimumIdle}" />
		<property name="maximumPoolSize" value="${jdbc.hikari.maximumPoolSize}" />
		<property name="connectionInitSql" value="${jdbc.hikari.connectionInitSql}" />
	</bean>

	<!-- Data Source -->
	<bean id="DataSource" class="com.logicaldoc.core.util.ConnectionPool" destroy-method="close" init-method="init">
		<property name="implementation" value="${jdbc.cp}" />
		<property name="hikariConfig" ref="HikariConfig" />
		<property name="dbcpConfig" ref="DbcpConfig" />
	</bean>

<!-- Hibernate SessionFactory -->
    <bean id="SessionFactory" class="com.logicaldoc.util.spring.LocalSessionFactory"
		abstract="false" lazy-init="default" autowire="default">
		<property name="dataSource" ref="DataSource" />
		<property name="entityInterceptor">
			<bean class="com.logicaldoc.core.LastModifiedInterceptor" />
		</property>
		<property name="mappingLocations" value="classpath*:mappings/*.hbm.xml" />
		<property name="hibernateProperties">
            <props>
                <prop key="hibernate.dialect">${hibernate.dialect}</prop>
                <prop key="hibernate.id.optimizer.pooled.preferred">${hibernate.id.optimizer}</prop>
                <prop key="hibernate.generate_statistics">true</prop>
                <prop key="hibernate.cache.use_second_level_cache">true</prop>
                <prop key="hibernate.cache.use_query_cache">true</prop>
                <prop key="hibernate.cache.region.factory_class">org.infinispan.hibernate.cache.v62.InfinispanRegionFactory</prop>
                <prop key="hibernate.cache.infinispan.cfg">/infinispan.xml</prop>
            </props>
		</property>
	</bean>
	<!--Transaction management -->
	<bean id="TransactionManager"
		class="org.springframework.orm.hibernate5.HibernateTransactionManager" abstract="false"
		lazy-init="default" autowire="default">
		<property name="sessionFactory" ref="SessionFactory" />
	</bean>
	<!--Transactional proxy -->
	<bean id="ApplicationBaseTransactionProxy"
		class="org.springframework.transaction.interceptor.TransactionProxyFactoryBean" lazy-init="true"
		abstract="false" autowire="default">
		<property name="transactionManager">
			<ref bean="TransactionManager" />
		</property>
		<property name="transactionAttributes">
			<props>
				<prop key="*">PROPAGATION_REQUIRED</prop>
			</props>
		</property>
	</bean>
	<bean id="TempFolderCleanerJob"
		class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<property name="targetObject">
			<bean class="com.logicaldoc.web.TempFolderCleaner" />
		</property>
		<property name="targetMethod" value="clean" />
		<property name="concurrent" value="false" />
	</bean>
	<bean id="TempFolderCleaner"
		class="org.springframework.scheduling.quartz.SimpleTriggerFactoryBean">
		<property name="jobDetail" ref="TempFolderCleanerJob" />
		<property name="startDelay" value="10000" />
		<property name="repeatInterval" value="3600000" />
	</bean>

	<!-- Scheduler -->
	<bean id="Scheduler" class="com.logicaldoc.core.task.DefaultSchedulerFactory"
		destroy-method="destroy">
		<property name="waitForJobsToCompleteOnShutdown" value="true" />
	</bean>
</beans>